import { 
    ActionRowBuilder, 
    ButtonBuilder, 
    ButtonStyle, 
    StringSelectMenuBuilder,
    EmbedBuilder 
} from 'discord.js';
import googleDriveService from '../services/googleDrive.js';
import searchService from '../services/search.js';
import { createLogger } from '../utils/logger.js';
import { 
    createSuccessEmbed, 
    createErrorEmbed, 
    createInfoEmbed, 
    createLoadingEmbed 
} from '../utils/embeds.js';
import { 
    formatFileSize, 
    formatDate, 
    getFileIcon, 
    getFolderIcon, 
    createBreadcrumb, 
    truncateString,
    getRandomCuteResponse,
    getRandomErrorResponse
} from '../utils/helpers.js';
import QRCode from 'qrcode';

const logger = createLogger();

export async function handleButtonInteraction(interaction, action, params) {
    const userId = interaction.user.id;

    // Prevent double replies
    if (interaction.replied || interaction.deferred) {
        return;
    }

    await interaction.deferReply({ ephemeral: true });

    try {
        switch (action) {
            case 'gdrive':
                await handleGoogleDriveButton(interaction, params, userId);
                break;
            case 'search':
                await handleSearchButton(interaction, params, userId);
                break;
            case 'refresh':
                await handleRefreshButton(interaction, params, userId);
                break;
            case 'back':
                await handleBackButton(interaction, params, userId);
                break;
            case 'folder':
                await handleFolderButton(interaction, params, userId);
                break;
            case 'download':
                await handleDownloadButton(interaction, params, userId);
                break;
            case 'delete':
                await handleDeleteButton(interaction, params, userId);
                break;
            case 'share':
                await handleShareButton(interaction, params, userId);
                break;
            case 'confirm':
                await handleConfirmButton(interaction, params, userId);
                break;
            case 'cancel':
                await handleCancelButton(interaction, params, userId);
                break;
            // Additional Google Drive actions
            case 'quick':
                await handleQuickShareButton(interaction, params, userId);
                break;
            case 'upload':
                await handleUploadRetryButton(interaction, params, userId);
                break;
            // Additional specific Google Drive actions
            case 'gdrive_refresh':
                await handleGdriveRefreshButton(interaction, params, userId);
                break;
            case 'gdrive_upload':
                await handleGdriveUploadButton(interaction, params, userId);
                break;
            case 'gdrive_quickshare':
                await handleGdriveQuickShareButton(interaction, params, userId);
                break;
            case 'gdrive_quickdownload':
                await handleGdriveQuickDownloadButton(interaction, params, userId);
                break;
            case 'share_info':
                await handleShareInfoButton(interaction, params, userId);
                break;
            case 'share_retry':
                await handleShareRetryButton(interaction, params, userId);
                break;
            case 'delete_retry':
                await handleDeleteRetryButton(interaction, params, userId);
                break;
            default:
                await interaction.editReply({
                    embeds: [createErrorEmbed('Unknown Action', 'Kh√¥ng hi·ªÉu action n√†y! ü§î')]
                });
        }
    } catch (error) {
        logger.error(`Error in button interaction handler:`, error);
        
        const errorEmbed = createErrorEmbed(
            'Interaction Error',
            `${getRandomErrorResponse()}\nL·ªói: ${error.message || 'Unknown error'}`
        );
        
        await interaction.editReply({ embeds: [errorEmbed] });
    }
}

export async function handleSelectMenuInteraction(interaction, action, params) {
    const userId = interaction.user.id;
    const selectedValue = interaction.values[0];

    await interaction.deferReply({ ephemeral: true });

    try {
        switch (action) {
            case 'searchtype':
                await handleSearchTypeSelect(interaction, selectedValue, userId);
                break;
            case 'help':
                await handleHelpSelect(interaction, selectedValue, userId);
                break;
            default:
                await interaction.editReply({
                    embeds: [createErrorEmbed('Unknown Selection', 'Kh√¥ng hi·ªÉu l·ª±a ch·ªçn n√†y! ü§î')]
                });
        }
    } catch (error) {
        logger.error(`Error in select menu interaction handler:`, error);
        
        const errorEmbed = createErrorEmbed(
            'Selection Error',
            `${getRandomErrorResponse()}\nL·ªói: ${error.message || 'Unknown error'}`
        );
        
        await interaction.editReply({ embeds: [errorEmbed] });
    }
}

async function handleGoogleDriveButton(interaction, params, userId) {
    const [subAction, ...subParams] = params;

    switch (subAction) {
        case 'authorize':
            const authUrl = googleDriveService.generateAuthUrl(userId);
            
            const authEmbed = createInfoEmbed(
                'Google Drive Authorization',
                `H√£y click v√†o link b√™n d∆∞·ªõi ƒë·ªÉ k·∫øt n·ªëi Google Drive nh√©! üòä\n\n**B∆∞·ªõc 1:** Click v√†o n√∫t "Authorize"\n**B∆∞·ªõc 2:** ƒêƒÉng nh·∫≠p Google v√† cho ph√©p quy·ªÅn truy c·∫≠p\n**B∆∞·ªõc 3:** Copy code v√† d√πng l·ªánh \`/gdrive verify <code>\``
            );

            const authRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setLabel('üîë Authorize Google Drive')
                        .setStyle(ButtonStyle.Link)
                        .setURL(authUrl)
                );

            await interaction.editReply({
                embeds: [authEmbed],
                components: [authRow]
            });
            break;

        case 'list':
            const folderId = subParams[0] || null;
            await displayFileManager(interaction, userId, folderId);
            break;

        case 'upload':
            const uploadEmbed = createInfoEmbed(
                'Upload File',
                `ƒê·ªÉ upload file, h√£y d√πng l·ªánh \`/gdrive upload\` v√† attach file b·∫°n mu·ªën upload! üìÅ\n\nGi·ªõi h·∫°n: 8MB per file üíñ`
            );

            await interaction.editReply({ embeds: [uploadEmbed] });
            break;

        case 'help':
            await handleGdriveHelpButton(interaction, subParams, userId);
            break;

        case 'status':
            await handleGdriveStatusButton(interaction, subParams, userId);
            break;

        case 'link':
            await handleGdriveLinkButton(interaction, subParams, userId);
            break;

        case 'search':
            await handleGdriveSearchButton(interaction, subParams, userId);
            break;

        default:
            await interaction.editReply({
                embeds: [createErrorEmbed('Unknown Action', 'Kh√¥ng hi·ªÉu Google Drive action n√†y! ü§î')]
            });
    }
}

async function handleSearchButton(interaction, params, userId) {
    const [subAction, ...subParams] = params;

    switch (subAction) {
        case 'type':
            const searchTypeMenu = new StringSelectMenuBuilder()
                .setCustomId('searchtype_select')
                .setPlaceholder('Ch·ªçn lo·∫°i t√¨m ki·∫øm...')
                .addOptions([
                    {
                        label: 'üåê Web Search',
                        description: 'T√¨m ki·∫øm web th√¥ng th∆∞·ªùng',
                        value: 'web'
                    },
                    {
                        label: 'üñºÔ∏è Image Search',
                        description: 'T√¨m ki·∫øm h√¨nh ·∫£nh',
                        value: 'image'
                    },
                    {
                        label: 'üì∞ News Search',
                        description: 'T√¨m ki·∫øm tin t·ª©c',
                        value: 'news'
                    },
                    {
                        label: 'üé• Video Search',
                        description: 'T√¨m ki·∫øm video',
                        value: 'video'
                    },
                    {
                        label: 'üìÑ Document Search',
                        description: 'T√¨m ki·∫øm t√†i li·ªáu',
                        value: 'document'
                    }
                ]);

            const searchRow = new ActionRowBuilder()
                .addComponents(searchTypeMenu);

            await interaction.editReply({
                embeds: [createInfoEmbed('Search Type', 'Ch·ªçn lo·∫°i t√¨m ki·∫øm b·∫°n mu·ªën! üîç')],
                components: [searchRow]
            });
            break;

        default:
            await interaction.editReply({
                embeds: [createErrorEmbed('Unknown Action', 'Kh√¥ng hi·ªÉu search action n√†y! ü§î')]
            });
    }
}

async function handleFolderButton(interaction, params, userId) {
    const folderId = params[0];
    await displayFileManager(interaction, userId, folderId);
}

async function handleDownloadButton(interaction, params, userId) {
    const [subAction, ...subParams] = params;
    
    switch (subAction) {
        case 'direct':
            const fileId = subParams[0];
            await downloadDirectFile(interaction, userId, fileId);
            break;
            
        case 'retry':
            const fileName = subParams[0];
            await retryDownload(interaction, userId, fileName);
            break;
            
        default:
            // Legacy support - assume first param is fileId
            const legacyFileId = params[0];
            await downloadDirectFile(interaction, userId, legacyFileId);
            break;
    }
}

async function downloadDirectFile(interaction, userId, fileId) {
    try {
        const loadingEmbed = createLoadingEmbed(
            'Downloading File',
            'ƒêang t·∫£i file xu·ªëng... Vui l√≤ng ch·ªù! üîÑ'
        );
        
        await interaction.editReply({ embeds: [loadingEmbed] });

        const { stream, metadata } = await googleDriveService.downloadFile(userId, fileId);
        
        // For now, we'll just show file info since Discord has file size limits
        const fileEmbed = createSuccessEmbed(
            'File Ready for Download',
            `**File:** ${metadata.name}\n**Size:** ${formatFileSize(metadata.size)}\n**Type:** ${metadata.mimeType}\n\n${getRandomCuteResponse()}`
        );

        const downloadRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`share_quick_${userId}_${fileId}`)
                    .setLabel('üîó Get Share Link')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId(`download_retry_${userId}_${metadata.name}`)
                    .setLabel('üîÑ Retry Download')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.editReply({ 
            embeds: [fileEmbed],
            components: [downloadRow]
        });
        
    } catch (error) {
        logger.error(`Download error:`, error);
        await interaction.editReply({
            embeds: [createErrorEmbed('Download Failed', `Kh√¥ng th·ªÉ t·∫£i file: ${error.message} üòÖ`)]
        });
    }
}

async function retryDownload(interaction, userId, fileName) {
    try {
        const loadingEmbed = createLoadingEmbed(
            'Retrying Download',
            `ƒêang th·ª≠ l·∫°i t·∫£i file "${fileName}"... üîÑ`
        );
        
        await interaction.editReply({ embeds: [loadingEmbed] });

        // Search for file by name first
        const searchResults = await googleDriveService.searchFiles(userId, fileName);
        
        if (searchResults.length === 0) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y file "${fileName}"`);
        }

        const file = searchResults[0];
        await downloadDirectFile(interaction, userId, file.id);
        
    } catch (error) {
        logger.error(`Retry download error:`, error);
        await interaction.editReply({
            embeds: [createErrorEmbed('Retry Failed', `Kh√¥ng th·ªÉ th·ª≠ l·∫°i t·∫£i file: ${error.message} üòÖ`)]
        });
    }
}

async function handleDeleteButton(interaction, params, userId) {
    const fileId = params[0];
    const fileName = params[1] || 'Unknown';
    
    // Show confirmation dialog
    const confirmEmbed = createInfoEmbed(
        'Confirm Delete',
        `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a file **${fileName}**?\n\n‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!`
    );

    const confirmRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`confirm_delete_${fileId}`)
                .setLabel('‚úÖ X√≥a')
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId('cancel_delete')
                .setLabel('‚ùå H·ªßy')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.editReply({
        embeds: [confirmEmbed],
        components: [confirmRow]
    });
}

async function handleShareButton(interaction, params, userId) {
    const [subAction, ...subParams] = params;
    
    switch (subAction) {
        case 'quick':
            const fileId = subParams[0];
            await shareQuickFile(interaction, userId, fileId);
            break;
            
        default:
            // Legacy support - assume first param is fileId
            const legacyFileId = params[0];
            await shareQuickFile(interaction, userId, legacyFileId);
            break;
    }
}

async function shareQuickFile(interaction, userId, fileId) {
    try {
        const loadingEmbed = createLoadingEmbed(
            'Sharing File',
            'ƒêang t·∫°o link chia s·∫ª... Ch·ªù ch√∫t nh√©! üîó'
        );
        
        await interaction.editReply({ embeds: [loadingEmbed] });

        const sharedFile = await googleDriveService.shareFile(userId, fileId);
        
        // Generate QR code for the share link
        const qrCodeBuffer = await QRCode.toBuffer(sharedFile.webViewLink);
        
        const shareEmbed = createSuccessEmbed(
            'File Shared Successfully',
            `**File:** ${sharedFile.name}\n\n**View Link:** [Click here](${sharedFile.webViewLink})\n**Download Link:** [Click here](${sharedFile.webContentLink})\n\n${getRandomCuteResponse()}`
        );

        const shareRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setLabel('üîó View File')
                    .setStyle(ButtonStyle.Link)
                    .setURL(sharedFile.webViewLink),
                new ButtonBuilder()
                    .setLabel('‚¨áÔ∏è Download')
                    .setStyle(ButtonStyle.Link)
                    .setURL(sharedFile.webContentLink)
            );

        await interaction.editReply({
            embeds: [shareEmbed],
            components: [shareRow],
            files: [{
                attachment: qrCodeBuffer,
                name: 'qr-code.png',
                description: 'QR Code for file link'
            }]
        });
        
    } catch (error) {
        logger.error(`Share error:`, error);
        await interaction.editReply({
            embeds: [createErrorEmbed('Share Failed', `Kh√¥ng th·ªÉ chia s·∫ª file: ${error.message} üòÖ`)]
        });
    }
}

async function handleConfirmButton(interaction, params, userId) {
    const [action, ...actionParams] = params;

    switch (action) {
        case 'delete':
            const fileId = actionParams[0];
            
            try {
                const loadingEmbed = createLoadingEmbed(
                    'Deleting File',
                    'ƒêang x√≥a file... Ch·ªù ch√∫t! üóëÔ∏è'
                );
                
                await interaction.editReply({ embeds: [loadingEmbed] });

                await googleDriveService.deleteFile(userId, fileId);
                
                const successEmbed = createSuccessEmbed(
                    'File Deleted',
                    `File ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng! ${getRandomCuteResponse()}`
                );

                await interaction.editReply({ embeds: [successEmbed], components: [] });
                
            } catch (error) {
                logger.error(`Delete error:`, error);
                await interaction.editReply({
                    embeds: [createErrorEmbed('Delete Failed', `Kh√¥ng th·ªÉ x√≥a file: ${error.message} üòÖ`)],
                    components: []
                });
            }
            break;

        default:
            await interaction.editReply({
                embeds: [createErrorEmbed('Unknown Confirmation', 'Kh√¥ng hi·ªÉu confirmation n√†y! ü§î')],
                components: []
            });
    }
}

async function handleCancelButton(interaction, params, userId) {
    const cancelEmbed = createInfoEmbed(
        'Action Cancelled',
        `ƒê√£ h·ªßy thao t√°c! ${getRandomCuteResponse()}`
    );

    await interaction.editReply({ embeds: [cancelEmbed], components: [] });
}

async function handleRefreshButton(interaction, params, userId) {
    const folderId = params[0] || null;
    await displayFileManager(interaction, userId, folderId);
}

async function handleBackButton(interaction, params, userId) {
    const parentFolderId = params[0] || null;
    await displayFileManager(interaction, userId, parentFolderId);
}

async function displayFileManager(interaction, userId, folderId = null) {
    try {
        const loadingEmbed = createLoadingEmbed(
            'Loading Files',
            'ƒêang t·∫£i danh s√°ch file... Ch·ªù ch√∫t! üìÇ'
        );
        
        await interaction.editReply({ embeds: [loadingEmbed] });

        const { folders, files } = await googleDriveService.listFiles(userId, folderId);
        
        // Create breadcrumb
        const breadcrumb = createBreadcrumb(folderId || '/');
        
        // Create embed
        const fileEmbed = new EmbedBuilder()
            .setTitle('üìÅ File Manager')
            .setDescription(`**Location:** ${breadcrumb}`)
            .setColor(0x4285f4)
            .setFooter({ text: 'üíñ Hina Bot ‚Ä¢ Google Drive' })
            .setTimestamp();

        // Add folders
        if (folders.length > 0) {
            const folderList = folders.map(folder => 
                `${getFolderIcon()} **${truncateString(folder.name, 30)}**`
            ).join('\n');
            
            fileEmbed.addFields({
                name: 'üìÅ Folders',
                value: folderList,
                inline: false
            });
        }

        // Add files
        if (files.length > 0) {
            const fileList = files.map(file => 
                `${getFileIcon(file.mimeType)} **${truncateString(file.name, 30)}**\n` +
                `Size: ${formatFileSize(file.size || 0)} ‚Ä¢ ${formatDate(file.modifiedTime)}`
            ).join('\n\n');
            
            fileEmbed.addFields({
                name: 'üìÑ Files',
                value: fileList,
                inline: false
            });
        }

        if (folders.length === 0 && files.length === 0) {
            fileEmbed.setDescription(
                `**Location:** ${breadcrumb}\n\n*Folder n√†y tr·ªëng! üì≠*`
            );
        }

        // Create action buttons
        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`refresh_${folderId || 'root'}`)
                    .setLabel('üîÑ Refresh')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('gdrive_upload')
                    .setLabel('üì§ Upload')
                    .setStyle(ButtonStyle.Primary)
            );

        if (folderId) {
            actionRow.addComponents(
                new ButtonBuilder()
                    .setCustomId(`back_parent`)
                    .setLabel('‚¨ÖÔ∏è Back')
                    .setStyle(ButtonStyle.Secondary)
            );
        }

        const components = [actionRow];

        // Create folder navigation buttons
        if (folders.length > 0) {
            const folderButtons = folders.slice(0, 5).map(folder => 
                new ButtonBuilder()
                    .setCustomId(`folder_${folder.id}`)
                    .setLabel(truncateString(folder.name, 20))
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üìÅ')
            );

            const folderRow = new ActionRowBuilder()
                .addComponents(folderButtons);
            
            components.push(folderRow);
        }

        // Create file action buttons
        if (files.length > 0) {
            const fileButtons = files.slice(0, 3).map(file => 
                new ButtonBuilder()
                    .setCustomId(`share_${file.id}`)
                    .setLabel(truncateString(file.name, 15))
                    .setStyle(ButtonStyle.Success)
                    .setEmoji('üîó')
            );

            const fileRow = new ActionRowBuilder()
                .addComponents(fileButtons);
            
            components.push(fileRow);
        }

        await interaction.editReply({
            embeds: [fileEmbed],
            components: components
        });
        
    } catch (error) {
        logger.error(`File manager error:`, error);
        await interaction.editReply({
            embeds: [createErrorEmbed('File Manager Error', `Kh√¥ng th·ªÉ t·∫£i file manager: ${error.message} üòÖ`)]
        });
    }
}

// New Google Drive action handlers
async function handleQuickShareButton(interaction, params, userId) {
    const [subAction, ...subParams] = params;
    
    switch (subAction) {
        case 'share':
            const fileId = subParams[0];
            await shareQuickFile(interaction, userId, fileId);
            break;
            
        default:
            await interaction.editReply({
                embeds: [createErrorEmbed('Unknown Quick Action', 'Kh√¥ng hi·ªÉu quick action n√†y! ü§î')]
            });
    }
}

async function handleUploadRetryButton(interaction, params, userId) {
    const [subAction, ...subParams] = params;
    
    switch (subAction) {
        case 'retry':
            const retryEmbed = createInfoEmbed(
                'Upload Retry',
                `ƒê·ªÉ th·ª≠ l·∫°i upload file, h√£y d√πng l·ªánh \`/gdrive upload\` v√† attach file b·∫°n mu·ªën upload l·∫°i! üìÅ\n\nüí° **Tip:** Ki·ªÉm tra k√≠ch th∆∞·ªõc file kh√¥ng v∆∞·ª£t qu√° 8MB`
            );

            const retryRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`gdrive_status_${userId}`)
                        .setLabel('üìä Check Status')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId(`gdrive_list_${userId}`)
                        .setLabel('üìÅ View Files')
                        .setStyle(ButtonStyle.Primary)
                );

            await interaction.editReply({ 
                embeds: [retryEmbed],
                components: [retryRow]
            });
            break;
            
        default:
            await interaction.editReply({
                embeds: [createErrorEmbed('Unknown Upload Action', 'Kh√¥ng hi·ªÉu upload action n√†y! ü§î')]
            });
    }
}

async function handleGdriveHelpButton(interaction, params, userId) {
    const helpEmbed = createInfoEmbed(
        'üìö Google Drive Help',
        `**H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Google Drive:**\n\n` +
        `üîó **Connect:** \`/gdrive connect\` - K·∫øt n·ªëi t√†i kho·∫£n Google\n` +
        `üìÇ **List:** \`/gdrive list\` - Xem danh s√°ch file\n` +
        `üì§ **Upload:** \`/gdrive upload\` - Upload file l√™n Drive\n` +
        `üîç **Search:** \`/gdrive search <query>\` - T√¨m ki·∫øm file\n` +
        `üìÑ **Info:** \`/gdrive info <filename>\` - Xem th√¥ng tin file\n` +
        `üìä **Status:** \`/gdrive status\` - Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi\n\n` +
        `üí° **Tips:**\n` +
        `‚Ä¢ File t·ªëi ƒëa 8MB\n` +
        `‚Ä¢ H·ªó tr·ª£ m·ªçi lo·∫°i file\n` +
        `‚Ä¢ Auto-categorize theo lo·∫°i file\n\n` +
        `${getRandomCuteResponse()}`
    );

    const helpRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`gdrive_status_${userId}`)
                .setLabel('üìä Check Status')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId(`gdrive_list_${userId}`)
                .setLabel('üìÅ My Files')
                .setStyle(ButtonStyle.Primary)
        );

    await interaction.editReply({ 
        embeds: [helpEmbed],
        components: [helpRow]
    });
}

async function handleGdriveStatusButton(interaction, params, userId) {
    try {
        const loadingEmbed = createLoadingEmbed(
            'Checking Status',
            'ƒêang ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi... üîÑ'
        );
        
        await interaction.editReply({ embeds: [loadingEmbed] });

        const isConnected = await googleDriveService.isUserConnected(userId);
        
        if (isConnected) {
            // Get user info and storage quota
            try {
                const userInfo = await googleDriveService.getUserInfo(userId);
                const storageQuota = await googleDriveService.getStorageQuota(userId);
                
                const statusEmbed = createSuccessEmbed(
                    '‚úÖ Google Drive Connected',
                    `**Account:** ${userInfo.displayName}\n` +
                    `**Email:** ${userInfo.emailAddress}\n` +
                    `**Storage Used:** ${formatFileSize(storageQuota.usage)} / ${formatFileSize(storageQuota.limit)}\n` +
                    `**Available:** ${formatFileSize(storageQuota.limit - storageQuota.usage)}\n\n` +
                    `${getRandomCuteResponse()}`
                );

                const statusRow = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`gdrive_list_${userId}`)
                            .setLabel('üìÅ View Files')
                            .setStyle(ButtonStyle.Primary),
                        new ButtonBuilder()
                            .setCustomId(`gdrive_search_${userId}`)
                            .setLabel('üîç Search Files')
                            .setStyle(ButtonStyle.Secondary)
                    );

                await interaction.editReply({ 
                    embeds: [statusEmbed],
                    components: [statusRow]
                });
                
            } catch (error) {
                logger.error(`Error getting detailed status:`, error);
                
                const basicStatusEmbed = createSuccessEmbed(
                    '‚úÖ Google Drive Connected',
                    `T√†i kho·∫£n Google Drive ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi th√†nh c√¥ng!\n\n${getRandomCuteResponse()}`
                );

                const basicStatusRow = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`gdrive_list_${userId}`)
                            .setLabel('üìÅ View Files')
                            .setStyle(ButtonStyle.Primary)
                    );

                await interaction.editReply({ 
                    embeds: [basicStatusEmbed],
                    components: [basicStatusRow]
                });
            }
        } else {
            const notConnectedEmbed = createErrorEmbed(
                '‚ùå Not Connected',
                `B·∫°n ch∆∞a k·∫øt n·ªëi Google Drive!\n\nH√£y d√πng l·ªánh \`/gdrive connect\` ƒë·ªÉ k·∫øt n·ªëi t√†i kho·∫£n nh√©! üíñ`
            );

            const connectRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`gdrive_link_${userId}`)
                        .setLabel('üîó Connect Now')
                        .setStyle(ButtonStyle.Primary)
                );

            await interaction.editReply({ 
                embeds: [notConnectedEmbed],
                components: [connectRow]
            });
        }
        
    } catch (error) {
        logger.error(`Status check error:`, error);
        await interaction.editReply({
            embeds: [createErrorEmbed('Status Check Failed', `Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i: ${error.message} üòÖ`)]
        });
    }
}

async function handleGdriveLinkButton(interaction, params, userId) {
    const authUrl = googleDriveService.generateAuthUrl(userId);
    
    const linkEmbed = createInfoEmbed(
        'üîó Connect Google Drive',
        `ƒê·ªÉ k·∫øt n·ªëi Google Drive v·ªõi Hina Bot:\n\n` +
        `**B∆∞·ªõc 1:** Click n√∫t "Connect Google Drive" b√™n d∆∞·ªõi\n` +
        `**B∆∞·ªõc 2:** ƒêƒÉng nh·∫≠p v√† cho ph√©p quy·ªÅn truy c·∫≠p\n` +
        `**B∆∞·ªõc 3:** Copy authorization code\n` +
        `**B∆∞·ªõc 4:** D√πng l·ªánh \`/gdrive verify <code>\`\n\n` +
        `üí° **L∆∞u √Ω:** Code ch·ªâ c√≥ hi·ªáu l·ª±c trong 10 ph√∫t!`
    );

    const linkRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setLabel('üîë Connect Google Drive')
                .setStyle(ButtonStyle.Link)
                .setURL(authUrl),
            new ButtonBuilder()
                .setCustomId(`gdrive_help_${userId}`)
                .setLabel('‚ùì Help')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.editReply({
        embeds: [linkEmbed],
        components: [linkRow]
    });
}

async function handleGdriveSearchButton(interaction, params, userId) {
    const searchEmbed = createInfoEmbed(
        'üîç Search Google Drive',
        `ƒê·ªÉ t√¨m ki·∫øm file trong Google Drive:\n\n` +
        `**C√°ch 1:** D√πng l·ªánh \`/gdrive search <t·ª´ kh√≥a>\`\n` +
        `**C√°ch 2:** D√πng file manager v√† navigate qua folders\n\n` +
        `**V√≠ d·ª• t√¨m ki·∫øm:**\n` +
        `‚Ä¢ \`/gdrive search report.pdf\` - T√¨m file c·ª• th·ªÉ\n` +
        `‚Ä¢ \`/gdrive search *.jpg\` - T√¨m t·∫•t c·∫£ ·∫£nh JPG\n` +
        `‚Ä¢ \`/gdrive search mimeType:application/pdf\` - T√¨m PDF\n\n` +
        `${getRandomCuteResponse()}`
    );

    const searchRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`gdrive_list_${userId}`)
                .setLabel('üìÅ Browse Files')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId(`gdrive_status_${userId}`)
                .setLabel('üìä Check Status')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.editReply({ 
        embeds: [searchEmbed],
        components: [searchRow]
    });
}

// Additional Google Drive handlers
async function handleGdriveRefreshButton(interaction, params, userId) {
    const folderId = params[0] || null;
    await displayFileManager(interaction, userId, folderId);
}

async function handleGdriveUploadButton(interaction, params, userId) {
    const uploadEmbed = createInfoEmbed(
        'üì§ Upload File to Google Drive',
        `ƒê·ªÉ upload file l√™n Google Drive:\n\n` +
        `**C√°ch s·ª≠ d·ª•ng:** \`/gdrive upload\` + attach file\n\n` +
        `**Gi·ªõi h·∫°n:**\n` +
        `‚Ä¢ T·ªëi ƒëa 8MB per file\n` +
        `‚Ä¢ H·ªó tr·ª£ m·ªçi lo·∫°i file\n` +
        `‚Ä¢ Auto-categorize theo lo·∫°i\n\n` +
        `**Categories:**\n` +
        `üì∏ Images: JPG, PNG, GIF, etc.\n` +
        `üìÑ Documents: PDF, DOC, TXT, etc.\n` +
        `üì¶ Archives: ZIP, RAR, 7Z, etc.\n` +
        `üìÅ Others: C√°c file kh√°c\n\n` +
        `${getRandomCuteResponse()}`
    );

    const uploadRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`gdrive_list_${userId}`)
                .setLabel('üìÅ View Files')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId(`gdrive_status_${userId}`)
                .setLabel('üìä Check Status')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.editReply({ 
        embeds: [uploadEmbed],
        components: [uploadRow]
    });
}

async function handleGdriveQuickShareButton(interaction, params, userId) {
    const quickShareEmbed = createInfoEmbed(
        'üöÄ Quick Share',
        `Quick Share cho ph√©p b·∫°n nhanh ch√≥ng chia s·∫ª file v·ªõi b·∫°n b√®!\n\n` +
        `**C√°ch s·ª≠ d·ª•ng:**\n` +
        `1. Ch·ªçn file t·ª´ danh s√°ch\n` +
        `2. Click n√∫t "Quick Share"\n` +
        `3. Copy link v√† chia s·∫ª\n\n` +
        `**T√≠nh nƒÉng:**\n` +
        `üîó Link chia s·∫ª tr·ª±c ti·∫øp\n` +
        `üì± QR Code t·ª± ƒë·ªông\n` +
        `üëÄ View v√† Download links\n\n` +
        `${getRandomCuteResponse()}`
    );

    const quickShareRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`gdrive_list_${userId}`)
                .setLabel('üìÅ Choose File')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId(`gdrive_search_${userId}`)
                .setLabel('üîç Search File')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.editReply({ 
        embeds: [quickShareEmbed],
        components: [quickShareRow]
    });
}

async function handleGdriveQuickDownloadButton(interaction, params, userId) {
    const quickDownloadEmbed = createInfoEmbed(
        '‚ö° Quick Download',
        `Quick Download gi√∫p b·∫°n t·∫£i file nhanh ch√≥ng!\n\n` +
        `**L∆∞u √Ω Discord:**\n` +
        `‚Ä¢ Discord gi·ªõi h·∫°n file 8MB\n` +
        `‚Ä¢ File l·ªõn h∆°n s·∫Ω ƒë∆∞·ª£c chia s·∫ª qua link\n` +
        `‚Ä¢ H·ªó tr·ª£ preview cho ·∫£nh nh·ªè\n\n` +
        `**C√°ch s·ª≠ d·ª•ng:**\n` +
        `1. Ch·ªçn file t·ª´ danh s√°ch\n` +
        `2. Click "Quick Download"\n` +
        `3. File s·∫Ω ƒë∆∞·ª£c t·∫£i ho·∫∑c chia s·∫ª link\n\n` +
        `${getRandomCuteResponse()}`
    );

    const quickDownloadRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`gdrive_list_${userId}`)
                .setLabel('üìÅ Choose File')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId(`gdrive_search_${userId}`)
                .setLabel('üîç Find File')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.editReply({ 
        embeds: [quickDownloadEmbed],
        components: [quickDownloadRow]
    });
}

async function handleShareInfoButton(interaction, params, userId) {
    const fileId = params[0];
    
    try {
        const loadingEmbed = createLoadingEmbed(
            'Getting File Info',
            'ƒêang l·∫•y th√¥ng tin file... üìã'
        );
        
        await interaction.editReply({ embeds: [loadingEmbed] });

        // Get file metadata
        await googleDriveService.setUserAuth(userId);
        const response = await googleDriveService.drive.files.get({
            fileId: fileId,
            fields: 'id,name,mimeType,size,createdTime,modifiedTime,webViewLink,webContentLink,permissions'
        });

        const file = response.data;
        
        const infoEmbed = createInfoEmbed(
            'üìã File Information',
            `**Name:** ${file.name}\n` +
            `**Type:** ${file.mimeType}\n` +
            `**Size:** ${formatFileSize(file.size || 0)}\n` +
            `**Created:** ${formatDate(file.createdTime)}\n` +
            `**Modified:** ${formatDate(file.modifiedTime)}\n` +
            `**File ID:** \`${file.id}\`\n\n` +
            `${getRandomCuteResponse()}`
        );

        const infoRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`share_quick_${userId}_${fileId}`)
                    .setLabel('üîó Share Now')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId(`download_direct_${userId}_${fileId}`)
                    .setLabel('‚¨áÔ∏è Download')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.editReply({ 
            embeds: [infoEmbed],
            components: [infoRow]
        });
        
    } catch (error) {
        logger.error(`Share info error:`, error);
        await interaction.editReply({
            embeds: [createErrorEmbed('Info Failed', `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin file: ${error.message} üòÖ`)]
        });
    }
}

async function handleShareRetryButton(interaction, params, userId) {
    const fileName = params[0];
    
    try {
        const loadingEmbed = createLoadingEmbed(
            'Retrying Share',
            `ƒêang th·ª≠ l·∫°i chia s·∫ª file "${fileName}"... üîÑ`
        );
        
        await interaction.editReply({ embeds: [loadingEmbed] });

        // Search for file by name first
        const searchResults = await googleDriveService.searchFiles(userId, fileName);
        
        if (searchResults.length === 0) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y file "${fileName}"`);
        }

        const file = searchResults[0];
        await shareQuickFile(interaction, userId, file.id);
        
    } catch (error) {
        logger.error(`Retry share error:`, error);
        await interaction.editReply({
            embeds: [createErrorEmbed('Retry Failed', `Kh√¥ng th·ªÉ th·ª≠ l·∫°i chia s·∫ª: ${error.message} üòÖ`)]
        });
    }
}

async function handleDeleteRetryButton(interaction, params, userId) {
    const fileName = params[0];
    
    try {
        const loadingEmbed = createLoadingEmbed(
            'Retrying Delete',
            `ƒêang th·ª≠ l·∫°i x√≥a file "${fileName}"... üóëÔ∏è`
        );
        
        await interaction.editReply({ embeds: [loadingEmbed] });

        // Search for file by name first
        const searchResults = await googleDriveService.searchFiles(userId, fileName);
        
        if (searchResults.length === 0) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y file "${fileName}"`);
        }

        const file = searchResults[0];
        
        // Show confirmation dialog
        const confirmEmbed = createInfoEmbed(
            'Confirm Delete',
            `T√¨m th·∫•y file: **${file.name}**\n\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a file n√†y?\n\n‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!`
        );

        const confirmRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`confirm_delete_${file.id}`)
                    .setLabel('‚úÖ X√≥a')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId('cancel_delete')
                    .setLabel('‚ùå H·ªßy')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.editReply({
            embeds: [confirmEmbed],
            components: [confirmRow]
        });
        
    } catch (error) {
        logger.error(`Retry delete error:`, error);
        await interaction.editReply({
            embeds: [createErrorEmbed('Retry Failed', `Kh√¥ng th·ªÉ th·ª≠ l·∫°i x√≥a file: ${error.message} üòÖ`)]
        });
    }
}

async function handleSearchTypeSelect(interaction, searchType, userId) {
    const searchEmbed = createInfoEmbed(
        `${searchService.getSearchTypeEmoji(searchType)} Search Selected`,
        `B·∫°n ƒë√£ ch·ªçn **${searchType.charAt(0).toUpperCase() + searchType.slice(1)} Search**!\n\nH√£y d√πng l·ªánh \`/search\` ƒë·ªÉ t√¨m ki·∫øm nh√©! üîç`
    );

    await interaction.editReply({ embeds: [searchEmbed], components: [] });
}

async function handleHelpSelect(interaction, helpCategory, userId) {
    const helpEmbed = createInfoEmbed(
        `Help: ${helpCategory}`,
        `ƒê√¢y l√† h∆∞·ªõng d·∫´n cho category **${helpCategory}**!\n\nComing soon... üíñ`
    );

    await interaction.editReply({ embeds: [helpEmbed], components: [] });
}
